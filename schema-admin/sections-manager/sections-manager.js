// Enhanced Sections Manager for Modern UI
class SectionsManager {
    constructor() {
        this.sections = [];
        this.selectedSection = null;
        this.isEditing = false;
        this.init();
    }

    async init() {
        this.bindEvents();
        await this.loadSections();
        this.renderSectionsGrid();
        this.updateStats();
    }

    bindEvents() {
        // Header actions
        document.getElementById('add-section-btn').addEventListener('click', () => {
            this.showSectionEditor();
        });

        // Form events
        const form = document.getElementById('section-form');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveSection();
            });

            form.addEventListener('input', () => {
                this.markFormDirty();
            });
        }

        // Editor controls
        document.getElementById('save-section-btn').addEventListener('click', () => {
            this.saveSection();
        });

        document.getElementById('cancel-edit-btn').addEventListener('click', () => {
            this.closeSectionEditor();
        });

        document.getElementById('delete-section-btn').addEventListener('click', () => {
            this.deleteSection();
        });

        document.getElementById('test-section-btn').addEventListener('click', () => {
            this.showTestModal();
        });

        // Auto-generate section key from name
        this.setupAutoKeyGeneration();
    }

    setupAutoKeyGeneration() {
        const nameInput = document.getElementById('section-name');
        const keyInput = document.getElementById('section-key');

        if (nameInput && keyInput) {
            nameInput.addEventListener('input', (e) => {
                if (!keyInput.value || keyInput.dataset.autoGenerated === 'true') {
                    keyInput.value = this.generateSectionKey(e.target.value);
                    keyInput.dataset.autoGenerated = 'true';
                }
            });

            keyInput.addEventListener('input', () => {
                keyInput.dataset.autoGenerated = 'false';
            });
        }
    }

    generateSectionKey(name) {
        return name.toLowerCase()
            .replace(/[^a-z0-9\s]/g, '')
            .replace(/\s+/g, '_')
            .substring(0, 50);
    }

    async loadSections() {
        try {
            const response = await fetch('/api/sections.php', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) {
                const data = await response.json();
                this.sections = data.sections || [];
            } else {
                console.error('Failed to load sections:', response.statusText);
                this.showNotification('Failed to load sections', 'error');
            }
        } catch (error) {
            console.error('Error loading sections:', error);
            this.showNotification('Error loading sections', 'error');
        }
    }

    renderSectionsGrid() {
        const grid = document.getElementById('sections-grid');
        if (!grid) return;

        if (this.sections.length === 0) {
            grid.innerHTML = `
                <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: var(--space-12);">
                    <div class="placeholder-icon">ðŸ“‹</div>
                    <h3>No sections yet</h3>
                    <p>Create your first custom report section to get started.</p>
                    <button onclick="sectionsManager.showSectionEditor()" class="action-btn">
                        <span class="icon">âž•</span> Create Section
                    </button>
                </div>
            `;
            return;
        }

        grid.innerHTML = this.sections.map(section => `
            <div class="section-card" onclick="sectionsManager.editSection(${section.id})">
                <div class="section-card-header">
                    <h3 class="section-card-title">${section.name}</h3>
                    <span class="section-card-key">${section.section_key}</span>
                </div>
                <p class="section-card-desc">${section.description || 'No description provided.'}</p>
                <div class="section-card-footer">
                    <div class="section-badges">
                        <span class="section-badge ${section.is_default ? 'default' : 'custom'}">
                            ${section.is_default ? 'Default' : 'Custom'}
                        </span>
                    </div>
                    <span class="section-order-badge">${section.display_order}</span>
                </div>
            </div>
        `).join('');
    }

    updateStats() {
        const totalSections = this.sections.length;
        const activeSections = this.sections.filter(s => s.is_default).length;
        const customSections = this.sections.filter(s => !s.is_default).length;

        document.getElementById('total-sections').textContent = totalSections;
        document.getElementById('active-sections').textContent = activeSections;
        document.getElementById('custom-sections').textContent = customSections;
    }

    showSectionEditor(sectionId = null) {
        this.selectedSection = sectionId ? this.sections.find(s => s.id === sectionId) : null;
        this.isEditing = !!this.selectedSection;

        // Show editor, hide overview
        document.querySelector('.sections-overview').style.display = 'none';
        document.getElementById('section-editor').classList.remove('hidden');

        // Update editor title
        const title = document.getElementById('editor-title');
        title.textContent = this.isEditing ? 'Edit Section' : 'Create New Section';

        // Show/hide delete button
        const deleteBtn = document.getElementById('delete-section-btn');
        deleteBtn.classList.toggle('hidden', !this.isEditing);

        // Populate form
        this.populateForm();

        // Update save button text
        const saveBtn = document.getElementById('save-section-btn');
        saveBtn.innerHTML = `<span class="icon">ðŸ’¾</span> ${this.isEditing ? 'Update' : 'Create'} Section`;
    }

    closeSectionEditor() {
        document.querySelector('.sections-overview').style.display = 'block';
        document.getElementById('section-editor').classList.add('hidden');
        this.clearForm();
        this.selectedSection = null;
        this.isEditing = false;
    }

    editSection(sectionId) {
        this.showSectionEditor(sectionId);
    }

    populateForm() {
        const form = document.getElementById('section-form');
        if (!form) return;

        if (this.selectedSection) {
            form.querySelector('#section-name').value = this.selectedSection.name || '';
            form.querySelector('#section-key').value = this.selectedSection.section_key || '';
            form.querySelector('#section-description').value = this.selectedSection.description || '';
            form.querySelector('#section-instructions').value = this.selectedSection.instructions || '';
            form.querySelector('#display-order').value = this.selectedSection.display_order || 1;
            form.querySelector('#is-default').checked = this.selectedSection.is_default || false;
        } else {
            form.reset();
            form.querySelector('#display-order').value = this.sections.length + 1;
            form.querySelector('#is-default').checked = true;
        }
    }

    clearForm() {
        const form = document.getElementById('section-form');
        if (form) form.reset();
    }

    async saveSection() {
        const formData = this.getFormData();
        if (!this.validateForm(formData)) return;

        try {
            const method = this.isEditing ? 'PUT' : 'POST';
            const url = this.isEditing ? 
                `/api/sections.php?id=${this.selectedSection.id}` : 
                '/api/sections.php';

            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                const result = await response.json();
                this.showNotification(
                    this.isEditing ? 'Section updated successfully' : 'Section created successfully', 
                    'success'
                );
                
                await this.loadSections();
                this.renderSectionsGrid();
                this.updateStats();
                this.closeSectionEditor();
            } else {
                const error = await response.json();
                this.showNotification(`Error: ${error.message}`, 'error');
            }
        } catch (error) {
            console.error('Error saving section:', error);
            this.showNotification('Error saving section', 'error');
        }
    }

    async deleteSection() {
        if (!this.selectedSection) return;

        if (!confirm(`Are you sure you want to delete "${this.selectedSection.name}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/sections.php?id=${this.selectedSection.id}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) {
                this.showNotification('Section deleted successfully', 'success');
                await this.loadSections();
                this.renderSectionsGrid();
                this.updateStats();
                this.closeSectionEditor();
            } else {
                const error = await response.json();
                this.showNotification(`Error: ${error.message}`, 'error');
            }
        } catch (error) {
            console.error('Error deleting section:', error);
            this.showNotification('Error deleting section', 'error');
        }
    }

    getFormData() {
        const form = document.getElementById('section-form');
        if (!form) return {};

        return {
            name: form.querySelector('#section-name').value.trim(),
            section_key: form.querySelector('#section-key').value.trim(),
            description: form.querySelector('#section-description').value.trim(),
            instructions: form.querySelector('#section-instructions').value.trim(),
            display_order: parseInt(form.querySelector('#display-order').value) || 1,
            is_default: form.querySelector('#is-default').checked
        };
    }

    validateForm(data) {
        if (!data.name) {
            this.showNotification('Section name is required', 'error');
            return false;
        }

        if (!data.section_key) {
            this.showNotification('Section key is required', 'error');
            return false;
        }

        if (!data.instructions) {
            this.showNotification('AI instructions are required', 'error');
            return false;
        }

        // Check for duplicate section key
        const existingSection = this.sections.find(s => 
            s.section_key === data.section_key && 
            (!this.selectedSection || s.id !== this.selectedSection.id)
        );

        if (existingSection) {
            this.showNotification('Section key must be unique', 'error');
            return false;
        }

        return true;
    }

    showTestModal() {
        const modal = document.getElementById('test-section-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    hideTestModal() {
        const modal = document.getElementById('test-section-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    markFormDirty() {
        // Could add unsaved changes indicator
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 4000);
    }
}

// Global functions for onclick handlers
window.sectionsManager = null;
window.closeSectionEditor = () => window.sectionsManager?.closeSectionEditor();
window.hideModal = (modalId) => {
    const modal = document.getElementById(modalId);
    if (modal) modal.classList.add('hidden');
};

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.sectionsManager = new SectionsManager();
});